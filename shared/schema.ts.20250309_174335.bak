import { z } from 'zod';
import type { User as PrismaUser, Product as PrismaProduct, Cart as PrismaCart, CartItem as PrismaCartItem, Order as PrismaOrder, OrderItem as PrismaOrderItem } from '@prisma/client';

// Type definitions
export type User = PrismaUser;
export type Product = PrismaProduct;
export type Cart = PrismaCart;
export type CartItem = PrismaCartItem;
export type Order = PrismaOrder;
export type OrderItem = PrismaOrderItem;

// Insert schemas
export const insertUserSchema = createInsertSchema(users)
  .extend({
    email: z.string().email(),
    firstName: z.string().min(2).max(50),
    lastName: z.string().min(2).max(50),
    role: z.enum(['admin', 'customer']).optional()
  })
  .omit({ id: true, createdAt: true });

export const insertProductSchema = createInsertSchema(products)
  .extend({
    name: z.string().min(3).max(100),
    description: z.string().min(10),
    price: z.string().refine((val) => parseFloat(val) > 0, { message: 'Price must be greater than 0' }),
    stock: z.number().int().min(0).optional()
  })
  .omit({ id: true, createdAt: true, updatedAt: true });

export const insertCartSchema = createInsertSchema(carts)
  .omit({ id: true, createdAt: true, updatedAt: true });

export const insertCartItemSchema = createInsertSchema(cartItems)
  .extend({
    quantity: z.number().int().min(1).optional()
  })
  .omit({ id: true, createdAt: true, updatedAt: true });

export const insertOrderSchema = createInsertSchema(orders)
  .extend({
    total: z.string().refine((val) => parseFloat(val) >= 0, { message: 'Total must be non-negative' }),
    shippingAddress: z.string().min(5),
    billingAddress: z.string().min(5),
    paymentMethod: z.string().min(3),
    status: z.enum(['pending', 'processing', 'shipped', 'delivered', 'cancelled']).optional()
  })
  .omit({ id: true, createdAt: true, updatedAt: true, paidAt: true });

export const insertOrderItemSchema = createInsertSchema(orderItems)
  .extend({
    name: z.string().min(3).max(100),
    price: z.string().refine((val) => parseFloat(val) > 0, { message: 'Price must be greater than 0' }),
    quantity: z.number().int().min(1)
  })
  .omit({ id: true, createdAt: true });

// Type definitions
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Product = typeof products.$inferSelect;
export type InsertProduct = z.infer<typeof insertProductSchema>;

export type Cart = typeof carts.$inferSelect;
export type InsertCart = z.infer<typeof insertCartSchema>;

export type CartItem = typeof cartItems.$inferSelect;
export type InsertCartItem = z.infer<typeof insertCartItemSchema>;

export type Order = typeof orders.$inferSelect;
export type InsertOrder = z.infer<typeof insertOrderSchema>;

export type OrderItem = typeof orderItems.$inferSelect;
export type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;